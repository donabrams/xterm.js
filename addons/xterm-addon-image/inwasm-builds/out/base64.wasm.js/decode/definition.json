{"def":{"name":"decode","type":0,"mode":1,"srctype":"Clang-C","imports":{"env":{"memory":{}}},"exports":{},"compile":{"switches":["-Wl,-z,stack-size=0","-Wl,--stack-first"]},"code":"\n    typedef struct {\n      unsigned int wp;\n      unsigned int sp;\n      unsigned int dp;\n      unsigned int e_size;\n      unsigned int b_size;\n      unsigned int dummy[3];\n      unsigned char data[0];\n    } State;\n\n    unsigned int *D0 = (unsigned int *) 1024;\n    unsigned int *D1 = (unsigned int *) 2048;\n    unsigned int *D2 = (unsigned int *) 3072;\n    unsigned int *D3 = (unsigned int *) 4096;\n    State *state = (State *) 5120;\n\n    __attribute__((noinline)) int dec() {\n      unsigned int nsp = (state->wp - 1) & ~3;\n      unsigned char *src = state->data + state->sp;\n      unsigned char *end = state->data + nsp;\n      unsigned char *dst = state->data + state->dp;\n      unsigned int accu;\n\n      while (src < end) {\n        if ((accu = D0[src[0]] | D1[src[1]] | D2[src[2]] | D3[src[3]]) >> 24) return 1;\n        *((unsigned int *) dst) = accu;\n        dst += 3;\n        src += 4;\n      }\n      state->sp = nsp;\n      state->dp = dst - state->data;\n      return 0;\n    }\n\n    int end() {\n      int rem = state->wp - state->sp;\n      if (rem > 4 && dec()) return 1;\n      rem = state->wp - state->sp;\n      if (rem < 2) return 1;\n\n      unsigned char *src = state->data + state->sp;\n      unsigned int accu = D0[src[0]] | D1[src[1]];\n      int dp = 1;\n      if (rem > 2 && src[2] != 61) {\n        accu |= D2[src[2]];\n        dp++;\n      }\n      if (rem == 4 && src[3] != 61) {\n        accu |= D3[src[3]];\n        dp++;\n      }\n      if (accu >> 24) return 1;\n      *((unsigned int *) (state->data + state->dp)) = accu;\n      state->dp += dp;\n      return state->dp != state->b_size;\n    }\n    "},"memorySettings":{"descriptor":{"initial":1,"shared":false},"mode":"imported"},"srcDef":"{\n    name: 'decode',\n    type: 0 /* OutputType.INSTANCE */,\n    mode: 1 /* OutputMode.SYNC */,\n    srctype: 'Clang-C',\n    imports: {\n        env: { memory: new WebAssembly.Memory({ initial: 1 }) }\n    },\n    exports: {\n        dec: () => 0,\n        end: () => 0\n    },\n    compile: {\n        switches: ['-Wl,-z,stack-size=0', '-Wl,--stack-first']\n    },\n    code: `\n    typedef struct {\n      unsigned int wp;\n      unsigned int sp;\n      unsigned int dp;\n      unsigned int e_size;\n      unsigned int b_size;\n      unsigned int dummy[3];\n      unsigned char data[0];\n    } State;\n\n    unsigned int *D0 = (unsigned int *) ${256 /* P32.D0 */ * 4};\n    unsigned int *D1 = (unsigned int *) ${512 /* P32.D1 */ * 4};\n    unsigned int *D2 = (unsigned int *) ${768 /* P32.D2 */ * 4};\n    unsigned int *D3 = (unsigned int *) ${1024 /* P32.D3 */ * 4};\n    State *state = (State *) ${1280 /* P32.STATE */ * 4};\n\n    __attribute__((noinline)) int dec() {\n      unsigned int nsp = (state->wp - 1) & ~3;\n      unsigned char *src = state->data + state->sp;\n      unsigned char *end = state->data + nsp;\n      unsigned char *dst = state->data + state->dp;\n      unsigned int accu;\n\n      while (src < end) {\n        if ((accu = D0[src[0]] | D1[src[1]] | D2[src[2]] | D3[src[3]]) >> 24) return 1;\n        *((unsigned int *) dst) = accu;\n        dst += 3;\n        src += 4;\n      }\n      state->sp = nsp;\n      state->dp = dst - state->data;\n      return 0;\n    }\n\n    int end() {\n      int rem = state->wp - state->sp;\n      if (rem > 4 && dec()) return 1;\n      rem = state->wp - state->sp;\n      if (rem < 2) return 1;\n\n      unsigned char *src = state->data + state->sp;\n      unsigned int accu = D0[src[0]] | D1[src[1]];\n      int dp = 1;\n      if (rem > 2 && src[2] != 61) {\n        accu |= D2[src[2]];\n        dp++;\n      }\n      if (rem == 4 && src[3] != 61) {\n        accu |= D3[src[3]];\n        dp++;\n      }\n      if (accu >> 24) return 1;\n      *((unsigned int *) (state->data + state->dp)) = accu;\n      state->dp += dp;\n      return state->dp != state->b_size;\n    }\n    `\n}","hash":""}